--
--  Copyright 2025 (C) Daniel King
--
--  SPDX-License-Identifier: Apache-2.0
--
with Interfaces;       use Interfaces;
with AUnit.Assertions; use AUnit.Assertions;

with LibCRC;

package body Generic_CRC_Table_Tests is

   use type CRC_Nbit.CRC_Table_Type;

   ---------------------------------
   -- Test_Compare_ROM_RAM_Tables --
   ---------------------------------

   --  This test checks that the unreflected ROM and RAM tables are identical

   procedure Test_Compare_ROM_RAM_Tables (T : in out Test_Fixture) is
   begin
      Assert (ROM_Table.all = RAM_Table.all,
              "contents of ROM_Table and RAM_Table are different");
   end Test_Compare_ROM_RAM_Tables;

   -----------------------------
   -- Test_Compare_ROM_Tables --
   -----------------------------

   --  This test compares the two ROM tables to check that the reflected one
   --  is the bit-reversed version of the normal one.

   procedure Test_Compare_ROM_Tables (T : in out Test_Fixture) is
      X : CRC_Type;
      Y : CRC_Type;
   begin
      for I in Unsigned_8'Range loop
         X := ROM_Table_Ref (I);
         Y := CRC_Nbit.Bit_Reverse_CRC (ROM_Table (LibCRC.Bit_Reverse (I)));
         Assert (X = Y, "mismatch for byte" & I'Image);
      end loop;
   end Test_Compare_ROM_Tables;

   -----------------------------
   -- Test_Compare_RAM_Tables --
   -----------------------------

   --  This test compares the two RAM tables to check that the reflected one
   --  is the bit-reversed version of the normal one.

   procedure Test_Compare_RAM_Tables (T : in out Test_Fixture) is
      X : CRC_Type;
      Y : CRC_Type;
   begin
      for I in Unsigned_8'Range loop
         X := RAM_Table_Ref (I);
         Y := CRC_Nbit.Bit_Reverse_CRC (RAM_Table (LibCRC.Bit_Reverse (I)));
         Assert (X = Y, "mismatch for byte" & I'Image);
      end loop;
   end Test_Compare_RAM_Tables;

   ----------------------------
   -- Test_ROM_Table_Content --
   ----------------------------

   --  This test checks that the unreflected ROM table has the expected content

   procedure Test_ROM_Table_Content (T : in out Test_Fixture) is
   begin
      Assert (ROM_Table.all = CRC_Nbit.Generate_Table (Polynomial),
              "ROM_Table content does not match the table generated by "
                & "Generate_Table");
   end Test_ROM_Table_Content;

   ----------------------------
   -- Test_RAM_Table_Content --
   ----------------------------

   --  This test checks that the unreflected RAM table has the expected content

   procedure Test_RAM_Table_Content (T : in out Test_Fixture) is
   begin
      Assert (RAM_Table.all = CRC_Nbit.Generate_Table (Polynomial),
              "RAM_Table content does not match the table generated by "
                & "Generate_Table");
   end Test_RAM_Table_Content;

   --------------------------------------
   -- Test_ROM_Table_Reflected_Content --
   --------------------------------------

   --  This test checks that the reflected ROM table has the expected content

   procedure Test_ROM_Table_Reflected_Content (T : in out Test_Fixture) is
   begin
      Assert (ROM_Table_Ref.all
                = CRC_Nbit.Generate_Table_Reflected
                    (CRC_Nbit.Bit_Reverse_CRC (Polynomial)),
              "ROM_Table_Reflected content does not match the table generated "
                & "by Generate_Table_Reflected");
   end Test_ROM_Table_Reflected_Content;

   --------------------------------------
   -- Test_RAM_Table_Reflected_Content --
   --------------------------------------

   --  This test checks that the reflected RAM table has the expected content

   procedure Test_RAM_Table_Reflected_Content (T : in out Test_Fixture) is
   begin
      Assert (RAM_Table_Ref.all
                = CRC_Nbit.Generate_Table_Reflected
                    (CRC_Nbit.Bit_Reverse_CRC (Polynomial)),
              "RAM_Table_Reflected content does not match the table generated "
                & "by Generate_Table_Reflected");
   end Test_RAM_Table_Reflected_Content;

   ------------------
   -- Add_To_Suite --
   ------------------

   procedure Add_To_Suite (S : in out Test_Suite'Class) is
   begin
      S.Add_Test (Caller.Create (Name & " compare ROM/RAM tables",
                                 Test_Compare_ROM_RAM_Tables'Access));
      S.Add_Test (Caller.Create (Name & " compare ROM tables",
                                 Test_Compare_ROM_Tables'Access));
      S.Add_Test (Caller.Create (Name & " compare RAM tables",
                                 Test_Compare_RAM_Tables'Access));
      S.Add_Test (Caller.Create (Name & " verify ROM_Table",
                                 Test_ROM_Table_Content'Access));
      S.Add_Test (Caller.Create (Name & " verify RAM_Table",
                                 Test_RAM_Table_Content'Access));
      S.Add_Test (Caller.Create (Name & " verify ROM_Table_Reflected",
                                 Test_ROM_Table_Reflected_Content'Access));
      S.Add_Test (Caller.Create (Name & " verify RAM_Table_Reflected",
                                 Test_RAM_Table_Reflected_Content'Access));
   end Add_To_Suite;

end Generic_CRC_Table_Tests;